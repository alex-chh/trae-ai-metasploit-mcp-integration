# 滲透測試自動化框架 Docker 配置
# Pentest Automation Framework Docker Configuration

# 使用官方 Python 3.11 slim 鏡像作為基礎
FROM python:3.11-slim

# 設置維護者信息
LABEL maintainer="AI Assistant <ai@example.com>"
LABEL description="滲透測試自動化框架 - 整合 Metasploit 和 GitHub MCP"
LABEL version="1.0.0"

# 設置環境變量
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# 設置工作目錄
WORKDIR /app

# 安裝系統依賴
RUN apt-get update && apt-get install -y \
    # 基本工具
    curl \
    wget \
    git \
    vim \
    nano \
    # 網絡工具
    nmap \
    netcat-traditional \
    dnsutils \
    iputils-ping \
    traceroute \
    whois \
    # 編譯工具
    gcc \
    g++ \
    make \
    # Python 開發依賴
    python3-dev \
    # SSL/TLS 支持
    ca-certificates \
    openssl \
    # 其他工具
    sqlite3 \
    postgresql-client \
    # 清理緩存
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# 創建非 root 用戶
RUN groupadd -r pentest && useradd -r -g pentest -d /app -s /bin/bash pentest

# 複製 requirements 文件
COPY requirements.txt .

# 安裝 Python 依賴
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# 複製項目文件
COPY . .

# 創建必要的目錄
RUN mkdir -p data logs reports backups temp && \
    chown -R pentest:pentest /app

# 複製配置文件
COPY .env.example .env

# 設置權限
RUN chmod +x main.py && \
    chmod -R 755 src/ && \
    chmod -R 777 data/ logs/ reports/ backups/ temp/

# 切換到非 root 用戶
USER pentest

# 暴露端口
EXPOSE 8080 8443 4444-4500

# 健康檢查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health')" || exit 1

# 設置入口點
ENTRYPOINT ["python", "main.py"]

# 默認命令
CMD ["--help"]