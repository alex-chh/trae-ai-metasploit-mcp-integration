# 滲透測試自動化框架 Docker Compose 配置
# Pentest Automation Framework Docker Compose Configuration

version: '3.8'

services:
  # 主應用服務
  pentest-framework:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pentest-framework
    restart: unless-stopped
    ports:
      - "8080:8080"    # Web 界面
      - "8443:8443"    # HTTPS Web 界面
      - "4444-4500:4444-4500"  # Metasploit 監聽端口範圍
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./backups:/app/backups
      - ./config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket (如果需要)
    environment:
      - FRAMEWORK_MODE=production
      - DATABASE_TYPE=postgresql
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=pentest_framework
      - POSTGRES_USER=pentest_user
      - POSTGRES_PASSWORD=secure_password_123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8080
    depends_on:
      - postgres
      - redis
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 數據庫
  postgres:
    image: postgres:15-alpine
    container_name: pentest-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pentest_framework
      - POSTGRES_USER=pentest_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pentest_user -d pentest_framework"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 緩存服務
  redis:
    image: redis:7-alpine
    container_name: pentest-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis_data:/data
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: pentest-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - pentest-framework
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Metasploit 服務 (可選)
  metasploit:
    image: metasploitframework/metasploit-framework:latest
    container_name: pentest-metasploit
    restart: unless-stopped
    ports:
      - "55553:55553"  # Metasploit RPC 端口
    volumes:
      - metasploit_data:/home/msf/.msf4
      - ./exploits:/tmp/exploits
    environment:
      - MSF_RPC_PASS=metasploit_rpc_password_123
    networks:
      - pentest-network
    command: >
      sh -c "msfrpcd -P metasploit_rpc_password_123 -S -a 0.0.0.0 -p 55553 -f"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "55553"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch (用於日誌分析)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pentest-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (日誌可視化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pentest-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    depends_on:
      - elasticsearch
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana (監控面板)
  grafana:
    image: grafana/grafana:latest
    container_name: pentest-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_admin_123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (監控數據收集)
  prometheus:
    image: prom/prometheus:latest
    container_name: pentest-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pentest-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

# 網絡配置
networks:
  pentest-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 數據卷配置
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  metasploit_data:
    driver: local
  elasticsearch_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

# 開發環境覆蓋配置
# 使用: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml 內容
version: '3.8'

services:
  pentest-framework:
    build:
      target: development
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - FRAMEWORK_MODE=development
      - DEBUG_MODE=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8080:8080"
      - "5678:5678"  # Python debugger
    command: python -m debugpy --listen 0.0.0.0:5678 --wait-for-client main.py

  # 開發工具
  adminer:
    image: adminer:latest
    container_name: pentest-adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    networks:
      - pentest-network

  # MailHog (郵件測試)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: pentest-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - pentest-network