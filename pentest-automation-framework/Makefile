# 滲透測試自動化框架 Makefile
# Pentest Automation Framework Makefile

.PHONY: help install install-dev setup clean test lint format check run docker-build docker-run backup docs

# 默認目標
.DEFAULT_GOAL := help

# 顏色定義
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# Python 解釋器
PYTHON := python3
PIP := pip3

# 項目配置
PROJECT_NAME := pentest-automation-framework
VERSION := 1.0.0
AUTHOR := AI Assistant

# 目錄配置
SRC_DIR := src
TEST_DIR := tests
DOCS_DIR := docs
DATA_DIR := data
LOGS_DIR := logs
REPORTS_DIR := reports
BACKUP_DIR := backups

help: ## 顯示幫助信息
	@echo "$(CYAN)$(PROJECT_NAME) v$(VERSION)$(RESET)"
	@echo "$(YELLOW)可用的命令:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'

install: ## 安裝項目依賴
	@echo "$(BLUE)安裝項目依賴...$(RESET)"
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)依賴安裝完成!$(RESET)"

install-dev: ## 安裝開發依賴
	@echo "$(BLUE)安裝開發依賴...$(RESET)"
	$(PIP) install -r requirements.txt
	$(PIP) install -e .[dev]
	@echo "$(GREEN)開發依賴安裝完成!$(RESET)"

setup: ## 初始化項目環境
	@echo "$(BLUE)初始化項目環境...$(RESET)"
	@mkdir -p $(DATA_DIR) $(LOGS_DIR) $(REPORTS_DIR) $(BACKUP_DIR)
	@if [ ! -f .env ]; then cp .env.example .env; echo "$(YELLOW)已創建 .env 文件，請根據需要修改配置$(RESET)"; fi
	@echo "$(GREEN)項目環境初始化完成!$(RESET)"

clean: ## 清理項目文件
	@echo "$(BLUE)清理項目文件...$(RESET)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@find . -type d -name "*.egg-info" -exec rm -rf {} +
	@rm -rf build/ dist/ .coverage htmlcov/ .pytest_cache/
	@echo "$(GREEN)清理完成!$(RESET)"

test: ## 運行測試
	@echo "$(BLUE)運行測試...$(RESET)"
	$(PYTHON) -m pytest $(TEST_DIR) -v --cov=$(SRC_DIR) --cov-report=html --cov-report=term
	@echo "$(GREEN)測試完成!$(RESET)"

test-quick: ## 快速測試（不生成覆蓋率報告）
	@echo "$(BLUE)運行快速測試...$(RESET)"
	$(PYTHON) -m pytest $(TEST_DIR) -v
	@echo "$(GREEN)快速測試完成!$(RESET)"

lint: ## 代碼檢查
	@echo "$(BLUE)運行代碼檢查...$(RESET)"
	$(PYTHON) -m flake8 $(SRC_DIR) $(TEST_DIR)
	$(PYTHON) -m mypy $(SRC_DIR)
	@echo "$(GREEN)代碼檢查完成!$(RESET)"

format: ## 格式化代碼
	@echo "$(BLUE)格式化代碼...$(RESET)"
	$(PYTHON) -m black $(SRC_DIR) $(TEST_DIR)
	$(PYTHON) -m isort $(SRC_DIR) $(TEST_DIR)
	@echo "$(GREEN)代碼格式化完成!$(RESET)"

check: lint test ## 運行所有檢查
	@echo "$(GREEN)所有檢查完成!$(RESET)"

run: ## 運行框架
	@echo "$(BLUE)啟動滲透測試自動化框架...$(RESET)"
	$(PYTHON) main.py

run-web: ## 運行 Web 界面
	@echo "$(BLUE)啟動 Web 界面...$(RESET)"
	$(PYTHON) -m src.web.app

run-api: ## 運行 API 服務器
	@echo "$(BLUE)啟動 API 服務器...$(RESET)"
	$(PYTHON) -m src.api.server

run-scan: ## 運行網絡掃描
	@echo "$(BLUE)運行網絡掃描...$(RESET)"
	$(PYTHON) main.py scan --targets $(TARGETS) --output $(REPORTS_DIR)

run-exploit: ## 運行漏洞利用
	@echo "$(BLUE)運行漏洞利用...$(RESET)"
	$(PYTHON) main.py exploit --targets $(TARGETS) --output $(REPORTS_DIR)

run-full: ## 運行完整滲透測試
	@echo "$(BLUE)運行完整滲透測試...$(RESET)"
	$(PYTHON) main.py full --targets $(TARGETS) --output $(REPORTS_DIR)

docker-build: ## 構建 Docker 鏡像
	@echo "$(BLUE)構建 Docker 鏡像...$(RESET)"
	docker build -t $(PROJECT_NAME):$(VERSION) .
	docker build -t $(PROJECT_NAME):latest .
	@echo "$(GREEN)Docker 鏡像構建完成!$(RESET)"

docker-run: ## 運行 Docker 容器
	@echo "$(BLUE)運行 Docker 容器...$(RESET)"
	docker run -it --rm -p 8080:8080 -v $(PWD)/data:/app/data -v $(PWD)/reports:/app/reports $(PROJECT_NAME):latest

docker-compose-up: ## 使用 Docker Compose 啟動服務
	@echo "$(BLUE)使用 Docker Compose 啟動服務...$(RESET)"
	docker-compose up -d
	@echo "$(GREEN)服務啟動完成!$(RESET)"

docker-compose-down: ## 停止 Docker Compose 服務
	@echo "$(BLUE)停止 Docker Compose 服務...$(RESET)"
	docker-compose down
	@echo "$(GREEN)服務已停止!$(RESET)"

backup: ## 創建數據備份
	@echo "$(BLUE)創建數據備份...$(RESET)"
	@mkdir -p $(BACKUP_DIR)
	@tar -czf $(BACKUP_DIR)/backup_$(shell date +%Y%m%d_%H%M%S).tar.gz $(DATA_DIR) $(LOGS_DIR) $(REPORTS_DIR)
	@echo "$(GREEN)備份完成!$(RESET)"

restore: ## 恢復數據備份
	@echo "$(BLUE)恢復數據備份...$(RESET)"
	@if [ -z "$(BACKUP_FILE)" ]; then echo "$(RED)請指定備份文件: make restore BACKUP_FILE=backup_file.tar.gz$(RESET)"; exit 1; fi
	@tar -xzf $(BACKUP_DIR)/$(BACKUP_FILE)
	@echo "$(GREEN)數據恢復完成!$(RESET)"

docs: ## 生成文檔
	@echo "$(BLUE)生成項目文檔...$(RESET)"
	@mkdir -p $(DOCS_DIR)
	$(PYTHON) -m sphinx.cmd.build -b html $(DOCS_DIR) $(DOCS_DIR)/_build/html
	@echo "$(GREEN)文檔生成完成!$(RESET)"

docs-serve: ## 啟動文檔服務器
	@echo "$(BLUE)啟動文檔服務器...$(RESET)"
	$(PYTHON) -m http.server 8000 --directory $(DOCS_DIR)/_build/html

install-tools: ## 安裝外部工具
	@echo "$(BLUE)檢查並安裝外部工具...$(RESET)"
	@echo "檢查 Nmap..."
	@which nmap || (echo "$(YELLOW)請手動安裝 Nmap$(RESET)" && exit 1)
	@echo "檢查 Metasploit..."
	@which msfconsole || (echo "$(YELLOW)請手動安裝 Metasploit Framework$(RESET)" && exit 1)
	@echo "$(GREEN)外部工具檢查完成!$(RESET)"

config-check: ## 檢查配置文件
	@echo "$(BLUE)檢查配置文件...$(RESET)"
	$(PYTHON) -c "from src.core.config import Config; Config.load_config(); print('配置文件檢查通過')"
	@echo "$(GREEN)配置檢查完成!$(RESET)"

db-init: ## 初始化數據庫
	@echo "$(BLUE)初始化數據庫...$(RESET)"
	$(PYTHON) -c "from src.database.manager import DatabaseManager; DatabaseManager().initialize_database()"
	@echo "$(GREEN)數據庫初始化完成!$(RESET)"

db-migrate: ## 數據庫遷移
	@echo "$(BLUE)執行數據庫遷移...$(RESET)"
	$(PYTHON) -c "from src.database.manager import DatabaseManager; DatabaseManager().migrate_database()"
	@echo "$(GREEN)數據庫遷移完成!$(RESET)"

db-backup: ## 備份數據庫
	@echo "$(BLUE)備份數據庫...$(RESET)"
	@mkdir -p $(BACKUP_DIR)
	$(PYTHON) -c "from src.database.manager import DatabaseManager; DatabaseManager().backup_database('$(BACKUP_DIR)/db_backup_$(shell date +%Y%m%d_%H%M%S).sql')"
	@echo "$(GREEN)數據庫備份完成!$(RESET)"

security-check: ## 安全檢查
	@echo "$(BLUE)運行安全檢查...$(RESET)"
	$(PYTHON) -m bandit -r $(SRC_DIR)
	$(PYTHON) -m safety check
	@echo "$(GREEN)安全檢查完成!$(RESET)"

performance-test: ## 性能測試
	@echo "$(BLUE)運行性能測試...$(RESET)"
	$(PYTHON) -m pytest $(TEST_DIR)/performance/ -v
	@echo "$(GREEN)性能測試完成!$(RESET)"

load-test: ## 負載測試
	@echo "$(BLUE)運行負載測試...$(RESET)"
	$(PYTHON) -m locust -f $(TEST_DIR)/load_test.py --host=http://localhost:8080

monitor: ## 監控系統狀態
	@echo "$(BLUE)監控系統狀態...$(RESET)"
	$(PYTHON) -c "from src.utils.monitor import SystemMonitor; SystemMonitor().display_status()"

log-tail: ## 查看實時日誌
	@echo "$(BLUE)查看實時日誌...$(RESET)"
	tail -f $(LOGS_DIR)/framework.log

log-clean: ## 清理日誌文件
	@echo "$(BLUE)清理日誌文件...$(RESET)"
	@find $(LOGS_DIR) -name "*.log" -mtime +7 -delete
	@echo "$(GREEN)日誌清理完成!$(RESET)"

update: ## 更新項目依賴
	@echo "$(BLUE)更新項目依賴...$(RESET)"
	$(PIP) install --upgrade -r requirements.txt
	@echo "$(GREEN)依賴更新完成!$(RESET)"

version: ## 顯示版本信息
	@echo "$(CYAN)$(PROJECT_NAME) v$(VERSION)$(RESET)"
	@echo "$(YELLOW)作者: $(AUTHOR)$(RESET)"
	@echo "$(YELLOW)Python 版本: $(shell $(PYTHON) --version)$(RESET)"

status: ## 顯示項目狀態
	@echo "$(CYAN)項目狀態:$(RESET)"
	@echo "$(YELLOW)項目名稱:$(RESET) $(PROJECT_NAME)"
	@echo "$(YELLOW)版本:$(RESET) $(VERSION)"
	@echo "$(YELLOW)Python 路徑:$(RESET) $(shell which $(PYTHON))"
	@echo "$(YELLOW)工作目錄:$(RESET) $(PWD)"
	@echo "$(YELLOW)數據目錄:$(RESET) $(DATA_DIR) ($(shell du -sh $(DATA_DIR) 2>/dev/null | cut -f1 || echo '不存在'))"
	@echo "$(YELLOW)日誌目錄:$(RESET) $(LOGS_DIR) ($(shell du -sh $(LOGS_DIR) 2>/dev/null | cut -f1 || echo '不存在'))"
	@echo "$(YELLOW)報告目錄:$(RESET) $(REPORTS_DIR) ($(shell du -sh $(REPORTS_DIR) 2>/dev/null | cut -f1 || echo '不存在'))"

# 開發相關命令
dev-setup: install-dev setup config-check db-init ## 完整開發環境設置
	@echo "$(GREEN)開發環境設置完成!$(RESET)"

dev-reset: clean setup db-init ## 重置開發環境
	@echo "$(GREEN)開發環境重置完成!$(RESET)"

dev-test: format lint test ## 開發測試流程
	@echo "$(GREEN)開發測試流程完成!$(RESET)"

# 生產相關命令
prod-deploy: install setup config-check db-migrate ## 生產環境部署
	@echo "$(GREEN)生產環境部署完成!$(RESET)"

prod-backup: backup db-backup ## 生產環境備份
	@echo "$(GREEN)生產環境備份完成!$(RESET)"

# 快捷命令
quick-start: setup install run ## 快速開始

full-check: format lint test security-check ## 完整檢查

all: clean install setup test docs ## 完整構建流程