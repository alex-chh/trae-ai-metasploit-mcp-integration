#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
配置管理模組
Configuration Management Module

處理框架的所有配置選項
"""

import os
import json
import yaml
from pathlib import Path
from typing import Dict, Any, Optional
from dataclasses import dataclass, field
from dotenv import load_dotenv


@dataclass
class MetasploitConfig:
    """Metasploit MCP 配置"""
    host: str = "localhost"
    port: int = 55553
    username: str = "msf"
    password: str = "msf"
    ssl: bool = False
    timeout: int = 30
    max_sessions: int = 10
    

@dataclass
class GitHubConfig:
    """GitHub MCP 配置"""
    token: str = ""
    owner: str = ""
    repo: str = "pentest-reports"
    branch: str = "main"
    auto_create_repo: bool = True
    

@dataclass
class DatabaseConfig:
    """數據庫配置"""
    type: str = "sqlite"
    host: str = "localhost"
    port: int = 5432
    database: str = "pentest_framework"
    username: str = ""
    password: str = ""
    

@dataclass
class ScanConfig:
    """掃描配置"""
    default_scan_type: str = "comprehensive"
    max_concurrent_scans: int = 5
    scan_timeout: int = 300
    nmap_options: Dict[str, str] = field(default_factory=lambda: {
        "quick": "-T4 -F",
        "comprehensive": "-T4 -A -sV -sC",
        "stealth": "-T2 -sS -f"
    })
    

@dataclass
class ReportConfig:
    """報告配置"""
    output_dir: str = "reports"
    template_dir: str = "templates"
    formats: list = field(default_factory=lambda: ["html", "pdf", "json"])
    include_screenshots: bool = True
    auto_upload: bool = False
    

@dataclass
class SecurityConfig:
    """安全配置"""
    encrypt_reports: bool = True
    log_level: str = "INFO"
    max_log_size: str = "100MB"
    backup_count: int = 5
    session_timeout: int = 3600
    

class Config:
    """
    主配置類
    
    管理所有框架配置選項
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """
        初始化配置
        
        Args:
            config_path: 配置文件路徑
        """
        # 載入環境變量
        load_dotenv()
        
        # 設置默認配置文件路徑
        if config_path is None:
            config_path = os.getenv(
                'PENTEST_CONFIG_PATH',
                'config/framework.yaml'
            )
        
        self.config_path = Path(config_path)
        self.config_data = {}
        
        # 載入配置
        self._load_config()
        
        # 初始化各模組配置
        self._init_configs()
    
    def _load_config(self):
        """
        載入配置文件
        """
        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    if self.config_path.suffix.lower() in ['.yaml', '.yml']:
                        self.config_data = yaml.safe_load(f)
                    elif self.config_path.suffix.lower() == '.json':
                        self.config_data = json.load(f)
                    else:
                        raise ValueError(f"不支持的配置文件格式: {self.config_path.suffix}")
            except Exception as e:
                print(f"載入配置文件失敗: {e}")
                self.config_data = {}
        else:
            print(f"配置文件不存在: {self.config_path}，使用默認配置")
            self.config_data = {}
    
    def _init_configs(self):
        """
        初始化各模組配置
        """
        # Metasploit 配置
        metasploit_data = self.config_data.get('metasploit', {})
        self.metasploit_config = MetasploitConfig(
            host=self._get_config_value('metasploit.host', metasploit_data.get('host', 'localhost')),
            port=self._get_config_value('metasploit.port', metasploit_data.get('port', 55553)),
            username=self._get_config_value('metasploit.username', metasploit_data.get('username', 'msf')),
            password=self._get_config_value('metasploit.password', metasploit_data.get('password', 'msf')),
            ssl=self._get_config_value('metasploit.ssl', metasploit_data.get('ssl', False)),
            timeout=self._get_config_value('metasploit.timeout', metasploit_data.get('timeout', 30)),
            max_sessions=self._get_config_value('metasploit.max_sessions', metasploit_data.get('max_sessions', 10))
        )
        
        # GitHub 配置
        github_data = self.config_data.get('github', {})
        self.github_config = GitHubConfig(
            token=self._get_config_value('github.token', github_data.get('token', '')),
            owner=self._get_config_value('github.owner', github_data.get('owner', '')),
            repo=self._get_config_value('github.repo', github_data.get('repo', 'pentest-reports')),
            branch=self._get_config_value('github.branch', github_data.get('branch', 'main')),
            auto_create_repo=self._get_config_value('github.auto_create_repo', github_data.get('auto_create_repo', True))
        )
        
        # 數據庫配置
        database_data = self.config_data.get('database', {})
        self.database_config = DatabaseConfig(
            type=self._get_config_value('database.type', database_data.get('type', 'sqlite')),
            host=self._get_config_value('database.host', database_data.get('host', 'localhost')),
            port=self._get_config_value('database.port', database_data.get('port', 5432)),
            database=self._get_config_value('database.database', database_data.get('database', 'pentest_framework')),
            username=self._get_config_value('database.username', database_data.get('username', '')),
            password=self._get_config_value('database.password', database_data.get('password', ''))
        )
        
        # 掃描配置
        scan_data = self.config_data.get('scan', {})
        self.scan_config = ScanConfig(
            default_scan_type=self._get_config_value('scan.default_scan_type', scan_data.get('default_scan_type', 'comprehensive')),
            max_concurrent_scans=self._get_config_value('scan.max_concurrent_scans', scan_data.get('max_concurrent_scans', 5)),
            scan_timeout=self._get_config_value('scan.scan_timeout', scan_data.get('scan_timeout', 300)),
            nmap_options=scan_data.get('nmap_options', {
                "quick": "-T4 -F",
                "comprehensive": "-T4 -A -sV -sC",
                "stealth": "-T2 -sS -f"
            })
        )
        
        # 報告配置
        report_data = self.config_data.get('report', {})
        self.report_config = ReportConfig(
            output_dir=self._get_config_value('report.output_dir', report_data.get('output_dir', 'reports')),
            template_dir=self._get_config_value('report.template_dir', report_data.get('template_dir', 'templates')),
            formats=report_data.get('formats', ["html", "pdf", "json"]),
            include_screenshots=self._get_config_value('report.include_screenshots', report_data.get('include_screenshots', True)),
            auto_upload=self._get_config_value('report.auto_upload', report_data.get('auto_upload', False))
        )
        
        # 安全配置
        security_data = self.config_data.get('security', {})
        self.security_config = SecurityConfig(
            encrypt_reports=self._get_config_value('security.encrypt_reports', security_data.get('encrypt_reports', True)),
            log_level=self._get_config_value('security.log_level', security_data.get('log_level', 'INFO')),
            max_log_size=self._get_config_value('security.max_log_size', security_data.get('max_log_size', '100MB')),
            backup_count=self._get_config_value('security.backup_count', security_data.get('backup_count', 5)),
            session_timeout=self._get_config_value('security.session_timeout', security_data.get('session_timeout', 3600))
        )
    
    def _get_config_value(self, key: str, default: Any) -> Any:
        """
        獲取配置值，優先使用環境變量
        
        Args:
            key: 配置鍵
            default: 默認值
            
        Returns:
            配置值
        """
        # 將點號分隔的鍵轉換為環境變量格式
        env_key = f"PENTEST_{key.upper().replace('.', '_')}"
        
        # 優先使用環境變量
        env_value = os.getenv(env_key)
        if env_value is not None:
            # 嘗試轉換類型
            if isinstance(default, bool):
                return env_value.lower() in ('true', '1', 'yes', 'on')
            elif isinstance(default, int):
                try:
                    return int(env_value)
                except ValueError:
                    pass
            elif isinstance(default, float):
                try:
                    return float(env_value)
                except ValueError:
                    pass
            return env_value
        
        return default
    
    def save_config(self, output_path: Optional[str] = None):
        """
        保存配置到文件
        
        Args:
            output_path: 輸出路徑
        """
        if output_path is None:
            output_path = self.config_path
        
        config_dict = {
            'metasploit': {
                'host': self.metasploit_config.host,
                'port': self.metasploit_config.port,
                'username': self.metasploit_config.username,
                'password': self.metasploit_config.password,
                'ssl': self.metasploit_config.ssl,
                'timeout': self.metasploit_config.timeout,
                'max_sessions': self.metasploit_config.max_sessions
            },
            'github': {
                'token': self.github_config.token,
                'owner': self.github_config.owner,
                'repo': self.github_config.repo,
                'branch': self.github_config.branch,
                'auto_create_repo': self.github_config.auto_create_repo
            },
            'database': {
                'type': self.database_config.type,
                'host': self.database_config.host,
                'port': self.database_config.port,
                'database': self.database_config.database,
                'username': self.database_config.username,
                'password': self.database_config.password
            },
            'scan': {
                'default_scan_type': self.scan_config.default_scan_type,
                'max_concurrent_scans': self.scan_config.max_concurrent_scans,
                'scan_timeout': self.scan_config.scan_timeout,
                'nmap_options': self.scan_config.nmap_options
            },
            'report': {
                'output_dir': self.report_config.output_dir,
                'template_dir': self.report_config.template_dir,
                'formats': self.report_config.formats,
                'include_screenshots': self.report_config.include_screenshots,
                'auto_upload': self.report_config.auto_upload
            },
            'security': {
                'encrypt_reports': self.security_config.encrypt_reports,
                'log_level': self.security_config.log_level,
                'max_log_size': self.security_config.max_log_size,
                'backup_count': self.security_config.backup_count,
                'session_timeout': self.security_config.session_timeout
            }
        }
        
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            if output_path.suffix.lower() in ['.yaml', '.yml']:
                yaml.dump(config_dict, f, default_flow_style=False, allow_unicode=True)
            else:
                json.dump(config_dict, f, indent=2, ensure_ascii=False)
    
    def validate_config(self) -> Dict[str, list]:
        """
        驗證配置
        
        Returns:
            驗證結果字典，包含錯誤和警告
        """
        errors = []
        warnings = []
        
        # 驗證 GitHub 配置
        if not self.github_config.token:
            errors.append("GitHub token 未配置")
        if not self.github_config.owner:
            warnings.append("GitHub owner 未配置，某些功能可能無法使用")
        
        # 驗證 Metasploit 配置
        if not self.metasploit_config.host:
            errors.append("Metasploit 主機地址未配置")
        if self.metasploit_config.port <= 0 or self.metasploit_config.port > 65535:
            errors.append("Metasploit 端口配置無效")
        
        # 驗證目錄配置
        report_dir = Path(self.report_config.output_dir)
        if not report_dir.exists():
            warnings.append(f"報告輸出目錄不存在: {report_dir}")
        
        return {
            'errors': errors,
            'warnings': warnings
        }