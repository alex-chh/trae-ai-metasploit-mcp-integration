#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
日誌管理模組
Logging Management Module

提供統一的日誌記錄功能
"""

import os
import sys
import logging
import logging.handlers
from pathlib import Path
from typing import Optional, Dict, Any
from datetime import datetime
import json


class ColoredFormatter(logging.Formatter):
    """
    彩色日誌格式化器
    """
    
    # ANSI 顏色代碼
    COLORS = {
        'DEBUG': '\033[36m',     # 青色
        'INFO': '\033[32m',      # 綠色
        'WARNING': '\033[33m',   # 黃色
        'ERROR': '\033[31m',     # 紅色
        'CRITICAL': '\033[35m',  # 紫色
        'RESET': '\033[0m'       # 重置
    }
    
    def format(self, record):
        # 添加顏色
        if hasattr(record, 'levelname'):
            color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
            record.levelname = f"{color}{record.levelname}{self.COLORS['RESET']}"
        
        return super().format(record)


class JSONFormatter(logging.Formatter):
    """
    JSON 格式化器
    """
    
    def format(self, record):
        log_entry = {
            'timestamp': datetime.fromtimestamp(record.created).isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno
        }
        
        # 添加額外字段
        if hasattr(record, 'extra_data'):
            log_entry.update(record.extra_data)
        
        # 添加異常信息
        if record.exc_info:
            log_entry['exception'] = self.formatException(record.exc_info)
        
        return json.dumps(log_entry, ensure_ascii=False)


class PentestLogger:
    """
    渗透測試框架日誌管理器
    """
    
    def __init__(self, name: str = "pentest-framework", config: Optional[Dict[str, Any]] = None):
        """
        初始化日誌管理器
        
        Args:
            name: 日誌器名稱
            config: 日誌配置
        """
        self.name = name
        self.config = config or {}
        self.logger = logging.getLogger(name)
        self.handlers = {}
        
        # 設置默認配置
        self._setup_default_config()
        
        # 初始化日誌器
        self._setup_logger()
    
    def _setup_default_config(self):
        """
        設置默認配置
        """
        defaults = {
            'level': 'INFO',
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            'date_format': '%Y-%m-%d %H:%M:%S',
            'log_dir': 'logs',
            'max_file_size': '10MB',
            'backup_count': 5,
            'console_output': True,
            'file_output': True,
            'json_output': False,
            'colored_output': True
        }
        
        for key, value in defaults.items():
            if key not in self.config:
                self.config[key] = value
    
    def _setup_logger(self):
        """
        設置日誌器
        """
        # 清除現有處理器
        self.logger.handlers.clear()
        
        # 設置日誌級別
        level = getattr(logging, self.config['level'].upper(), logging.INFO)
        self.logger.setLevel(level)
        
        # 創建日誌目錄
        log_dir = Path(self.config['log_dir'])
        log_dir.mkdir(parents=True, exist_ok=True)
        
        # 添加控制台處理器
        if self.config['console_output']:
            self._add_console_handler()
        
        # 添加文件處理器
        if self.config['file_output']:
            self._add_file_handler(log_dir)
        
        # 添加 JSON 處理器
        if self.config['json_output']:
            self._add_json_handler(log_dir)
        
        # 防止重複日誌
        self.logger.propagate = False
    
    def _add_console_handler(self):
        """
        添加控制台處理器
        """
        console_handler = logging.StreamHandler(sys.stdout)
        
        if self.config['colored_output'] and sys.stdout.isatty():
            formatter = ColoredFormatter(
                fmt=self.config['format'],
                datefmt=self.config['date_format']
            )
        else:
            formatter = logging.Formatter(
                fmt=self.config['format'],
                datefmt=self.config['date_format']
            )
        
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        self.handlers['console'] = console_handler
    
    def _add_file_handler(self, log_dir: Path):
        """
        添加文件處理器
        
        Args:
            log_dir: 日誌目錄
        """
        log_file = log_dir / f"{self.name}.log"
        
        # 解析文件大小
        max_bytes = self._parse_size(self.config['max_file_size'])
        
        file_handler = logging.handlers.RotatingFileHandler(
            filename=log_file,
            maxBytes=max_bytes,
            backupCount=self.config['backup_count'],
            encoding='utf-8'
        )
        
        formatter = logging.Formatter(
            fmt=self.config['format'],
            datefmt=self.config['date_format']
        )
        
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)
        self.handlers['file'] = file_handler
    
    def _add_json_handler(self, log_dir: Path):
        """
        添加 JSON 處理器
        
        Args:
            log_dir: 日誌目錄
        """
        json_file = log_dir / f"{self.name}.json"
        
        # 解析文件大小
        max_bytes = self._parse_size(self.config['max_file_size'])
        
        json_handler = logging.handlers.RotatingFileHandler(
            filename=json_file,
            maxBytes=max_bytes,
            backupCount=self.config['backup_count'],
            encoding='utf-8'
        )
        
        json_handler.setFormatter(JSONFormatter())
        self.logger.addHandler(json_handler)
        self.handlers['json'] = json_handler
    
    def _parse_size(self, size_str: str) -> int:
        """
        解析大小字符串
        
        Args:
            size_str: 大小字符串 (e.g., '10MB', '1GB')
            
        Returns:
            字節數
        """
        size_str = size_str.upper().strip()
        
        if size_str.endswith('KB'):
            return int(size_str[:-2]) * 1024
        elif size_str.endswith('MB'):
            return int(size_str[:-2]) * 1024 * 1024
        elif size_str.endswith('GB'):
            return int(size_str[:-2]) * 1024 * 1024 * 1024
        else:
            return int(size_str)
    
    def debug(self, message: str, extra_data: Optional[Dict] = None):
        """
        記錄調試信息
        
        Args:
            message: 日誌消息
            extra_data: 額外數據
        """
        self._log(logging.DEBUG, message, extra_data)
    
    def info(self, message: str, extra_data: Optional[Dict] = None):
        """
        記錄信息
        
        Args:
            message: 日誌消息
            extra_data: 額外數據
        """
        self._log(logging.INFO, message, extra_data)
    
    def warning(self, message: str, extra_data: Optional[Dict] = None):
        """
        記錄警告
        
        Args:
            message: 日誌消息
            extra_data: 額外數據
        """
        self._log(logging.WARNING, message, extra_data)
    
    def error(self, message: str, extra_data: Optional[Dict] = None, exc_info: bool = False):
        """
        記錄錯誤
        
        Args:
            message: 日誌消息
            extra_data: 額外數據
            exc_info: 是否包含異常信息
        """
        self._log(logging.ERROR, message, extra_data, exc_info=exc_info)
    
    def critical(self, message: str, extra_data: Optional[Dict] = None, exc_info: bool = False):
        """
        記錄嚴重錯誤
        
        Args:
            message: 日誌消息
            extra_data: 額外數據
            exc_info: 是否包含異常信息
        """
        self._log(logging.CRITICAL, message, extra_data, exc_info=exc_info)
    
    def _log(self, level: int, message: str, extra_data: Optional[Dict] = None, exc_info: bool = False):
        """
        內部日誌記錄方法
        
        Args:
            level: 日誌級別
            message: 日誌消息
            extra_data: 額外數據
            exc_info: 是否包含異常信息
        """
        extra = {'extra_data': extra_data} if extra_data else {}
        self.logger.log(level, message, extra=extra, exc_info=exc_info)
    
    def log_operation(self, operation: str, target: str, result: str, 
                     duration: Optional[float] = None, extra_data: Optional[Dict] = None):
        """
        記錄操作日誌
        
        Args:
            operation: 操作類型
            target: 目標
            result: 結果
            duration: 持續時間（秒）
            extra_data: 額外數據
        """
        log_data = {
            'operation': operation,
            'target': target,
            'result': result
        }
        
        if duration is not None:
            log_data['duration'] = f"{duration:.2f}s"
        
        if extra_data:
            log_data.update(extra_data)
        
        message = f"Operation: {operation} | Target: {target} | Result: {result}"
        if duration is not None:
            message += f" | Duration: {duration:.2f}s"
        
        self.info(message, log_data)
    
    def log_scan_result(self, scan_type: str, target: str, results: Dict):
        """
        記錄掃描結果
        
        Args:
            scan_type: 掃描類型
            target: 目標
            results: 掃描結果
        """
        log_data = {
            'scan_type': scan_type,
            'target': target,
            'results': results
        }
        
        message = f"Scan completed: {scan_type} on {target}"
        self.info(message, log_data)
    
    def log_exploit_attempt(self, exploit: str, target: str, success: bool, 
                           session_id: Optional[int] = None):
        """
        記錄漏洞利用嘗試
        
        Args:
            exploit: 漏洞利用模組
            target: 目標
            success: 是否成功
            session_id: 會話 ID
        """
        log_data = {
            'exploit': exploit,
            'target': target,
            'success': success
        }
        
        if session_id is not None:
            log_data['session_id'] = session_id
        
        result = "SUCCESS" if success else "FAILED"
        message = f"Exploit attempt: {exploit} on {target} - {result}"
        
        if success:
            self.info(message, log_data)
        else:
            self.warning(message, log_data)
    
    def set_level(self, level: str):
        """
        設置日誌級別
        
        Args:
            level: 日誌級別
        """
        log_level = getattr(logging, level.upper(), logging.INFO)
        self.logger.setLevel(log_level)
        self.config['level'] = level.upper()
    
    def add_handler(self, name: str, handler: logging.Handler):
        """
        添加自定義處理器
        
        Args:
            name: 處理器名稱
            handler: 處理器實例
        """
        self.logger.addHandler(handler)
        self.handlers[name] = handler
    
    def remove_handler(self, name: str):
        """
        移除處理器
        
        Args:
            name: 處理器名稱
        """
        if name in self.handlers:
            self.logger.removeHandler(self.handlers[name])
            del self.handlers[name]
    
    def close(self):
        """
        關閉所有處理器
        """
        for handler in self.handlers.values():
            handler.close()
        self.handlers.clear()


# 全局日誌實例
_global_logger = None


def setup_logger(name: str = "pentest-framework", config: Optional[Dict[str, Any]] = None) -> PentestLogger:
    """
    設置全局日誌器
    
    Args:
        name: 日誌器名稱
        config: 日誌配置
        
    Returns:
        日誌器實例
    """
    global _global_logger
    _global_logger = PentestLogger(name, config)
    return _global_logger


def get_logger() -> PentestLogger:
    """
    獲取全局日誌器
    
    Returns:
        日誌器實例
    """
    global _global_logger
    if _global_logger is None:
        _global_logger = PentestLogger()
    return _global_logger


# 便捷函數
def debug(message: str, extra_data: Optional[Dict] = None):
    """記錄調試信息"""
    get_logger().debug(message, extra_data)


def info(message: str, extra_data: Optional[Dict] = None):
    """記錄信息"""
    get_logger().info(message, extra_data)


def warning(message: str, extra_data: Optional[Dict] = None):
    """記錄警告"""
    get_logger().warning(message, extra_data)


def error(message: str, extra_data: Optional[Dict] = None, exc_info: bool = False):
    """記錄錯誤"""
    get_logger().error(message, extra_data, exc_info)


def critical(message: str, extra_data: Optional[Dict] = None, exc_info: bool = False):
    """記錄嚴重錯誤"""
    get_logger().critical(message, extra_data, exc_info)