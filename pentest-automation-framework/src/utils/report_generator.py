#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
報告生成模組
Report Generator Module

提供多格式報告生成功能
"""

import json
import time
import uuid
from typing import Dict, List, Any, Optional, Union
from dataclasses import dataclass, field
from pathlib import Path
from datetime import datetime
from enum import Enum
import base64
import hashlib

from ..core.logger import get_logger
from ..scanners.network_scanner import ScanResult
from ..scanners.vulnerability_scanner import VulnerabilityResult
from ..exploits.exploit_manager import ExploitReport
from ..post_exploit.post_exploit import PostExploitTask


class ReportFormat(Enum):
    """
    報告格式
    """
    JSON = "json"
    HTML = "html"
    PDF = "pdf"
    XML = "xml"
    CSV = "csv"
    MARKDOWN = "markdown"


class ReportSeverity(Enum):
    """
    報告嚴重程度
    """
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


@dataclass
class ReportSection:
    """
    報告章節
    """
    title: str
    content: Any
    section_type: str
    order: int = 0
    metadata: Dict[str, Any] = field(default_factory=dict)


@dataclass
class ExecutiveSummary:
    """
    執行摘要
    """
    total_hosts: int = 0
    vulnerable_hosts: int = 0
    total_vulnerabilities: int = 0
    critical_vulnerabilities: int = 0
    high_vulnerabilities: int = 0
    medium_vulnerabilities: int = 0
    low_vulnerabilities: int = 0
    successful_exploits: int = 0
    active_sessions: int = 0
    risk_score: float = 0.0
    recommendations: List[str] = field(default_factory=list)
    key_findings: List[str] = field(default_factory=list)


@dataclass
class PentestReport:
    """
    滲透測試報告
    """
    report_id: str
    title: str
    target: str
    start_time: float
    end_time: Optional[float] = None
    duration: Optional[float] = None
    tester: str = "Pentest Automation Framework"
    version: str = "1.0.0"
    executive_summary: Optional[ExecutiveSummary] = None
    sections: List[ReportSection] = field(default_factory=list)
    scan_results: List[ScanResult] = field(default_factory=list)
    vulnerability_results: List[VulnerabilityResult] = field(default_factory=list)
    exploit_reports: List[ExploitReport] = field(default_factory=list)
    post_exploit_tasks: List[PostExploitTask] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    attachments: List[str] = field(default_factory=list)


class ReportGenerator:
    """
    報告生成器
    
    生成多格式滲透測試報告
    """
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        """
        初始化報告生成器
        
        Args:
            config: 配置
        """
        self.config = config or {}
        self.logger = get_logger()
        
        # 默認配置
        self.default_config = {
            'output_directory': './reports',
            'template_directory': './templates',
            'include_raw_data': True,
            'include_screenshots': True,
            'compress_output': False,
            'auto_upload': False,
            'upload_url': None,
            'branding': {
                'company_name': 'Pentest Automation Framework',
                'logo_path': None,
                'contact_info': None
            },
            'risk_matrix': {
                'critical': {'score': 10, 'color': '#d32f2f'},
                'high': {'score': 7, 'color': '#f57c00'},
                'medium': {'score': 5, 'color': '#fbc02d'},
                'low': {'score': 3, 'color': '#388e3c'},
                'info': {'score': 1, 'color': '#1976d2'}
            }
        }
        
        # 合併配置
        for key, value in self.default_config.items():
            if key not in self.config:
                self.config[key] = value
        
        # 創建輸出目錄
        Path(self.config['output_directory']).mkdir(parents=True, exist_ok=True)
        
        # HTML 模板
        self.html_template = self._load_html_template()
    
    def create_report(self, target: str, title: Optional[str] = None) -> PentestReport:
        """
        創建新報告
        
        Args:
            target: 目標
            title: 報告標題
            
        Returns:
            滲透測試報告
        """
        report_id = f"pentest_{int(time.time())}_{str(uuid.uuid4())[:8]}"
        
        report = PentestReport(
            report_id=report_id,
            title=title or f"滲透測試報告 - {target}",
            target=target,
            start_time=time.time()
        )
        
        self.logger.info(f"創建報告: {report_id}", {
            "target": target,
            "title": report.title
        })
        
        return report
    
    def add_scan_results(self, report: PentestReport, scan_results: List[ScanResult]):
        """
        添加掃描結果
        
        Args:
            report: 報告
            scan_results: 掃描結果列表
        """
        report.scan_results.extend(scan_results)
        
        # 創建網絡掃描章節
        section = ReportSection(
            title="網絡掃描結果",
            content=scan_results,
            section_type="network_scan",
            order=1
        )
        report.sections.append(section)
        
        self.logger.info(f"添加掃描結果: {len(scan_results)} 個結果")
    
    def add_vulnerability_results(self, report: PentestReport, 
                                vulnerability_results: List[VulnerabilityResult]):
        """
        添加漏洞掃描結果
        
        Args:
            report: 報告
            vulnerability_results: 漏洞掃描結果列表
        """
        report.vulnerability_results.extend(vulnerability_results)
        
        # 創建漏洞掃描章節
        section = ReportSection(
            title="漏洞掃描結果",
            content=vulnerability_results,
            section_type="vulnerability_scan",
            order=2
        )
        report.sections.append(section)
        
        self.logger.info(f"添加漏洞結果: {len(vulnerability_results)} 個結果")
    
    def add_exploit_reports(self, report: PentestReport, exploit_reports: List[ExploitReport]):
        """
        添加漏洞利用報告
        
        Args:
            report: 報告
            exploit_reports: 漏洞利用報告列表
        """
        report.exploit_reports.extend(exploit_reports)
        
        # 創建漏洞利用章節
        section = ReportSection(
            title="漏洞利用結果",
            content=exploit_reports,
            section_type="exploit",
            order=3
        )
        report.sections.append(section)
        
        self.logger.info(f"添加漏洞利用報告: {len(exploit_reports)} 個報告")
    
    def add_post_exploit_tasks(self, report: PentestReport, tasks: List[PostExploitTask]):
        """
        添加後滲透任務
        
        Args:
            report: 報告
            tasks: 後滲透任務列表
        """
        report.post_exploit_tasks.extend(tasks)
        
        # 創建後滲透章節
        section = ReportSection(
            title="後滲透操作結果",
            content=tasks,
            section_type="post_exploit",
            order=4
        )
        report.sections.append(section)
        
        self.logger.info(f"添加後滲透任務: {len(tasks)} 個任務")
    
    def finalize_report(self, report: PentestReport):
        """
        完成報告
        
        Args:
            report: 報告
        """
        report.end_time = time.time()
        if report.start_time:
            report.duration = report.end_time - report.start_time
        
        # 生成執行摘要
        report.executive_summary = self._generate_executive_summary(report)
        
        # 排序章節
        report.sections.sort(key=lambda x: x.order)
        
        self.logger.info(f"報告完成: {report.report_id}", {
            "duration": report.duration,
            "sections": len(report.sections)
        })
    
    def _generate_executive_summary(self, report: PentestReport) -> ExecutiveSummary:
        """
        生成執行摘要
        
        Args:
            report: 報告
            
        Returns:
            執行摘要
        """
        summary = ExecutiveSummary()
        
        # 統計主機數量
        all_hosts = set()
        vulnerable_hosts = set()
        
        for scan_result in report.scan_results:
            for host in scan_result.hosts:
                all_hosts.add(host.ip_address)
        
        summary.total_hosts = len(all_hosts)
        
        # 統計漏洞
        vulnerability_counts = {
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0,
            'info': 0
        }
        
        for vuln_result in report.vulnerability_results:
            for vuln in vuln_result.results:
                severity = vuln.severity.value.lower()
                if severity in vulnerability_counts:
                    vulnerability_counts[severity] += 1
                
                vulnerable_hosts.add(vuln_result.target)
        
        summary.vulnerable_hosts = len(vulnerable_hosts)
        summary.total_vulnerabilities = sum(vulnerability_counts.values())
        summary.critical_vulnerabilities = vulnerability_counts['critical']
        summary.high_vulnerabilities = vulnerability_counts['high']
        summary.medium_vulnerabilities = vulnerability_counts['medium']
        summary.low_vulnerabilities = vulnerability_counts['low']
        
        # 統計成功的漏洞利用
        successful_exploits = 0
        active_sessions = 0
        
        for exploit_report in report.exploit_reports:
            for attempt in exploit_report.attempts:
                if attempt.success:
                    successful_exploits += 1
                if attempt.session and attempt.session.active:
                    active_sessions += 1
        
        summary.successful_exploits = successful_exploits
        summary.active_sessions = active_sessions
        
        # 計算風險分數
        summary.risk_score = self._calculate_risk_score(vulnerability_counts)
        
        # 生成關鍵發現和建議
        summary.key_findings = self._generate_key_findings(report)
        summary.recommendations = self._generate_recommendations(report)
        
        return summary
    
    def _calculate_risk_score(self, vulnerability_counts: Dict[str, int]) -> float:
        """
        計算風險分數
        
        Args:
            vulnerability_counts: 漏洞統計
            
        Returns:
            風險分數 (0-10)
        """
        risk_matrix = self.config['risk_matrix']
        total_score = 0
        total_vulns = 0
        
        for severity, count in vulnerability_counts.items():
            if severity in risk_matrix and count > 0:
                score = risk_matrix[severity]['score']
                total_score += score * count
                total_vulns += count
        
        if total_vulns == 0:
            return 0.0
        
        # 歸一化到 0-10 範圍
        average_score = total_score / total_vulns
        return min(10.0, average_score)
    
    def _generate_key_findings(self, report: PentestReport) -> List[str]:
        """
        生成關鍵發現
        
        Args:
            report: 報告
            
        Returns:
            關鍵發現列表
        """
        findings = []
        
        # 分析漏洞結果
        critical_vulns = []
        high_vulns = []
        
        for vuln_result in report.vulnerability_results:
            for vuln in vuln_result.results:
                if vuln.severity.value.lower() == 'critical':
                    critical_vulns.append(vuln)
                elif vuln.severity.value.lower() == 'high':
                    high_vulns.append(vuln)
        
        if critical_vulns:
            findings.append(f"發現 {len(critical_vulns)} 個嚴重漏洞，需要立即修復")
        
        if high_vulns:
            findings.append(f"發現 {len(high_vulns)} 個高危漏洞，建議優先處理")
        
        # 分析成功的漏洞利用
        successful_exploits = sum(1 for report in report.exploit_reports 
                                for attempt in report.attempts if attempt.success)
        
        if successful_exploits > 0:
            findings.append(f"成功利用 {successful_exploits} 個漏洞，獲得系統訪問權限")
        
        # 分析後滲透結果
        if report.post_exploit_tasks:
            findings.append(f"執行了 {len(report.post_exploit_tasks)} 個後滲透任務")
        
        return findings
    
    def _generate_recommendations(self, report: PentestReport) -> List[str]:
        """
        生成修復建議
        
        Args:
            report: 報告
            
        Returns:
            建議列表
        """
        recommendations = []
        
        # 基於漏洞類型的通用建議
        vuln_types = set()
        for vuln_result in report.vulnerability_results:
            for vuln in vuln_result.results:
                if vuln.cve_id:
                    vuln_types.add("CVE漏洞")
                if "password" in vuln.name.lower():
                    vuln_types.add("弱密碼")
                if "ssl" in vuln.name.lower() or "tls" in vuln.name.lower():
                    vuln_types.add("SSL/TLS配置")
        
        if "CVE漏洞" in vuln_types:
            recommendations.append("及時安裝安全補丁，建立補丁管理流程")
        
        if "弱密碼" in vuln_types:
            recommendations.append("實施強密碼策略，啟用多因素認證")
        
        if "SSL/TLS配置" in vuln_types:
            recommendations.append("更新SSL/TLS配置，禁用不安全的加密套件")
        
        # 通用安全建議
        recommendations.extend([
            "定期進行安全評估和滲透測試",
            "實施網絡分段和最小權限原則",
            "加強安全監控和日誌分析",
            "提供員工安全意識培訓"
        ])
        
        return recommendations
    
    def export_report(self, report: PentestReport, format_type: ReportFormat, 
                     output_path: Optional[str] = None) -> str:
        """
        導出報告
        
        Args:
            report: 報告
            format_type: 格式類型
            output_path: 輸出路徑
            
        Returns:
            輸出文件路徑
        """
        if not output_path:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{report.report_id}_{timestamp}.{format_type.value}"
            output_path = str(Path(self.config['output_directory']) / filename)
        
        output_path = Path(output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        self.logger.info(f"導出報告: {format_type.value}", {
            "report_id": report.report_id,
            "output_path": str(output_path)
        })
        
        if format_type == ReportFormat.JSON:
            self._export_json_report(report, output_path)
        elif format_type == ReportFormat.HTML:
            self._export_html_report(report, output_path)
        elif format_type == ReportFormat.XML:
            self._export_xml_report(report, output_path)
        elif format_type == ReportFormat.CSV:
            self._export_csv_report(report, output_path)
        elif format_type == ReportFormat.MARKDOWN:
            self._export_markdown_report(report, output_path)
        else:
            raise ValueError(f"不支持的報告格式: {format_type.value}")
        
        self.logger.info(f"報告導出完成: {output_path}")
        return str(output_path)
    
    def _export_json_report(self, report: PentestReport, output_path: Path):
        """
        導出 JSON 格式報告
        """
        # 轉換為可序列化的字典
        data = {
            'report_info': {
                'report_id': report.report_id,
                'title': report.title,
                'target': report.target,
                'start_time': report.start_time,
                'end_time': report.end_time,
                'duration': report.duration,
                'tester': report.tester,
                'version': report.version
            },
            'executive_summary': {
                'total_hosts': report.executive_summary.total_hosts if report.executive_summary else 0,
                'vulnerable_hosts': report.executive_summary.vulnerable_hosts if report.executive_summary else 0,
                'total_vulnerabilities': report.executive_summary.total_vulnerabilities if report.executive_summary else 0,
                'critical_vulnerabilities': report.executive_summary.critical_vulnerabilities if report.executive_summary else 0,
                'high_vulnerabilities': report.executive_summary.high_vulnerabilities if report.executive_summary else 0,
                'medium_vulnerabilities': report.executive_summary.medium_vulnerabilities if report.executive_summary else 0,
                'low_vulnerabilities': report.executive_summary.low_vulnerabilities if report.executive_summary else 0,
                'successful_exploits': report.executive_summary.successful_exploits if report.executive_summary else 0,
                'active_sessions': report.executive_summary.active_sessions if report.executive_summary else 0,
                'risk_score': report.executive_summary.risk_score if report.executive_summary else 0.0,
                'key_findings': report.executive_summary.key_findings if report.executive_summary else [],
                'recommendations': report.executive_summary.recommendations if report.executive_summary else []
            },
            'scan_results': [self._serialize_scan_result(sr) for sr in report.scan_results],
            'vulnerability_results': [self._serialize_vulnerability_result(vr) for vr in report.vulnerability_results],
            'exploit_reports': [self._serialize_exploit_report(er) for er in report.exploit_reports],
            'post_exploit_tasks': [self._serialize_post_exploit_task(pet) for pet in report.post_exploit_tasks],
            'metadata': report.metadata,
            'attachments': report.attachments
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False, default=str)
    
    def _export_html_report(self, report: PentestReport, output_path: Path):
        """
        導出 HTML 格式報告
        """
        # 生成 HTML 內容
        html_content = self._generate_html_content(report)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def _generate_html_content(self, report: PentestReport) -> str:
        """
        生成 HTML 內容
        
        Args:
            report: 報告
            
        Returns:
            HTML 內容
        """
        # 基本信息
        report_info = {
            'title': report.title,
            'target': report.target,
            'start_time': datetime.fromtimestamp(report.start_time).strftime('%Y-%m-%d %H:%M:%S'),
            'end_time': datetime.fromtimestamp(report.end_time).strftime('%Y-%m-%d %H:%M:%S') if report.end_time else 'N/A',
            'duration': f"{report.duration:.2f} 秒" if report.duration else 'N/A',
            'tester': report.tester,
            'version': report.version
        }
        
        # 執行摘要
        summary = report.executive_summary or ExecutiveSummary()
        
        # 生成漏洞統計圖表數據
        vuln_chart_data = {
            'critical': summary.critical_vulnerabilities,
            'high': summary.high_vulnerabilities,
            'medium': summary.medium_vulnerabilities,
            'low': summary.low_vulnerabilities
        }
        
        # 生成章節內容
        sections_html = ""
        for section in report.sections:
            sections_html += self._generate_section_html(section)
        
        # 使用模板生成完整 HTML
        html_content = self.html_template.format(
            **report_info,
            total_hosts=summary.total_hosts,
            vulnerable_hosts=summary.vulnerable_hosts,
            total_vulnerabilities=summary.total_vulnerabilities,
            critical_vulnerabilities=summary.critical_vulnerabilities,
            high_vulnerabilities=summary.high_vulnerabilities,
            medium_vulnerabilities=summary.medium_vulnerabilities,
            low_vulnerabilities=summary.low_vulnerabilities,
            successful_exploits=summary.successful_exploits,
            active_sessions=summary.active_sessions,
            risk_score=summary.risk_score,
            key_findings='<br>'.join(summary.key_findings),
            recommendations='<br>'.join(summary.recommendations),
            vuln_chart_data=json.dumps(vuln_chart_data),
            sections_content=sections_html,
            company_name=self.config['branding']['company_name']
        )
        
        return html_content
    
    def _generate_section_html(self, section: ReportSection) -> str:
        """
        生成章節 HTML
        
        Args:
            section: 章節
            
        Returns:
            章節 HTML
        """
        html = f"<h2>{section.title}</h2>\n"
        
        if section.section_type == "network_scan":
            html += self._generate_network_scan_html(section.content)
        elif section.section_type == "vulnerability_scan":
            html += self._generate_vulnerability_scan_html(section.content)
        elif section.section_type == "exploit":
            html += self._generate_exploit_html(section.content)
        elif section.section_type == "post_exploit":
            html += self._generate_post_exploit_html(section.content)
        else:
            html += f"<pre>{json.dumps(section.content, indent=2, ensure_ascii=False, default=str)}</pre>\n"
        
        return html
    
    def _generate_network_scan_html(self, scan_results: List[ScanResult]) -> str:
        """
        生成網絡掃描 HTML
        """
        html = "<div class='scan-results'>\n"
        
        for scan_result in scan_results:
            html += f"<h3>掃描目標: {scan_result.target}</h3>\n"
            html += f"<p>掃描類型: {scan_result.scan_type}</p>\n"
            html += f"<p>發現主機: {len(scan_result.hosts)}</p>\n"
            
            if scan_result.hosts:
                html += "<table class='hosts-table'>\n"
                html += "<tr><th>IP地址</th><th>狀態</th><th>開放端口</th><th>服務</th></tr>\n"
                
                for host in scan_result.hosts:
                    ports_info = ", ".join([f"{p.port}/{p.protocol}" for p in host.open_ports[:5]])
                    if len(host.open_ports) > 5:
                        ports_info += f" (+{len(host.open_ports) - 5} more)"
                    
                    services_info = ", ".join([p.service for p in host.open_ports if p.service][:3])
                    
                    html += f"<tr><td>{host.ip_address}</td><td>{host.status}</td><td>{ports_info}</td><td>{services_info}</td></tr>\n"
                
                html += "</table>\n"
        
        html += "</div>\n"
        return html
    
    def _generate_vulnerability_scan_html(self, vuln_results: List[VulnerabilityResult]) -> str:
        """
        生成漏洞掃描 HTML
        """
        html = "<div class='vulnerability-results'>\n"
        
        for vuln_result in vuln_results:
            html += f"<h3>目標: {vuln_result.target}</h3>\n"
            html += f"<p>發現漏洞: {len(vuln_result.results)}</p>\n"
            
            if vuln_result.results:
                html += "<table class='vulnerabilities-table'>\n"
                html += "<tr><th>漏洞名稱</th><th>嚴重程度</th><th>CVE ID</th><th>描述</th></tr>\n"
                
                for vuln in vuln_result.results:
                    severity_class = f"severity-{vuln.severity.value.lower()}"
                    html += f"<tr class='{severity_class}'>\n"
                    html += f"<td>{vuln.name}</td>\n"
                    html += f"<td><span class='severity-badge {severity_class}'>{vuln.severity.value}</span></td>\n"
                    html += f"<td>{vuln.cve_id or 'N/A'}</td>\n"
                    html += f"<td>{vuln.description[:100]}{'...' if len(vuln.description) > 100 else ''}</td>\n"
                    html += "</tr>\n"
                
                html += "</table>\n"
        
        html += "</div>\n"
        return html
    
    def _generate_exploit_html(self, exploit_reports: List[ExploitReport]) -> str:
        """
        生成漏洞利用 HTML
        """
        html = "<div class='exploit-results'>\n"
        
        for exploit_report in exploit_reports:
            html += f"<h3>目標: {exploit_report.target}</h3>\n"
            html += f"<p>利用嘗試: {len(exploit_report.attempts)}</p>\n"
            
            successful_attempts = [a for a in exploit_report.attempts if a.success]
            if successful_attempts:
                html += f"<p class='success'>成功利用: {len(successful_attempts)}</p>\n"
            
            if exploit_report.attempts:
                html += "<table class='exploits-table'>\n"
                html += "<tr><th>模組</th><th>載荷</th><th>狀態</th><th>會話ID</th><th>錯誤信息</th></tr>\n"
                
                for attempt in exploit_report.attempts:
                    status_class = "success" if attempt.success else "failed"
                    session_id = attempt.session.session_id if attempt.session else "N/A"
                    error_msg = attempt.error_message[:50] + "..." if attempt.error_message and len(attempt.error_message) > 50 else (attempt.error_message or "")
                    
                    html += f"<tr class='{status_class}'>\n"
                    html += f"<td>{attempt.module_name}</td>\n"
                    html += f"<td>{attempt.payload_name or 'N/A'}</td>\n"
                    html += f"<td><span class='status-badge {status_class}'>{'成功' if attempt.success else '失敗'}</span></td>\n"
                    html += f"<td>{session_id}</td>\n"
                    html += f"<td>{error_msg}</td>\n"
                    html += "</tr>\n"
                
                html += "</table>\n"
        
        html += "</div>\n"
        return html
    
    def _generate_post_exploit_html(self, tasks: List[PostExploitTask]) -> str:
        """
        生成後滲透 HTML
        """
        html = "<div class='post-exploit-results'>\n"
        
        for task in tasks:
            status_class = task.status.value.lower()
            html += f"<div class='task-item {status_class}'>\n"
            html += f"<h4>任務: {task.task_type.value}</h4>\n"
            html += f"<p>狀態: <span class='status-badge {status_class}'>{task.status.value}</span></p>\n"
            html += f"<p>會話ID: {task.session_id}</p>\n"
            html += f"<p>持續時間: {task.duration:.2f} 秒</p>\n" if task.duration else ""
            
            if task.results:
                html += "<h5>執行結果:</h5>\n"
                html += "<div class='task-output'>\n"
                for command, result in task.results.items():
                    html += f"<h6>{command}</h6>\n"
                    output = result.get('output', '')[:500]
                    if len(result.get('output', '')) > 500:
                        output += "..."
                    html += f"<pre>{output}</pre>\n"
                html += "</div>\n"
            
            if task.errors:
                html += "<h5>錯誤信息:</h5>\n"
                html += "<ul class='error-list'>\n"
                for error in task.errors:
                    html += f"<li>{error}</li>\n"
                html += "</ul>\n"
            
            html += "</div>\n"
        
        html += "</div>\n"
        return html
    
    def _export_xml_report(self, report: PentestReport, output_path: Path):
        """
        導出 XML 格式報告
        """
        xml_content = self._generate_xml_content(report)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(xml_content)
    
    def _generate_xml_content(self, report: PentestReport) -> str:
        """
        生成 XML 內容
        """
        xml = '<?xml version="1.0" encoding="UTF-8"?>\n'
        xml += '<pentest_report>\n'
        
        # 報告信息
        xml += '  <report_info>\n'
        xml += f'    <report_id>{report.report_id}</report_id>\n'
        xml += f'    <title><![CDATA[{report.title}]]></title>\n'
        xml += f'    <target>{report.target}</target>\n'
        xml += f'    <start_time>{report.start_time}</start_time>\n'
        xml += f'    <end_time>{report.end_time or ""}</end_time>\n'
        xml += f'    <duration>{report.duration or ""}</duration>\n'
        xml += f'    <tester>{report.tester}</tester>\n'
        xml += f'    <version>{report.version}</version>\n'
        xml += '  </report_info>\n'
        
        # 執行摘要
        if report.executive_summary:
            summary = report.executive_summary
            xml += '  <executive_summary>\n'
            xml += f'    <total_hosts>{summary.total_hosts}</total_hosts>\n'
            xml += f'    <vulnerable_hosts>{summary.vulnerable_hosts}</vulnerable_hosts>\n'
            xml += f'    <total_vulnerabilities>{summary.total_vulnerabilities}</total_vulnerabilities>\n'
            xml += f'    <critical_vulnerabilities>{summary.critical_vulnerabilities}</critical_vulnerabilities>\n'
            xml += f'    <high_vulnerabilities>{summary.high_vulnerabilities}</high_vulnerabilities>\n'
            xml += f'    <medium_vulnerabilities>{summary.medium_vulnerabilities}</medium_vulnerabilities>\n'
            xml += f'    <low_vulnerabilities>{summary.low_vulnerabilities}</low_vulnerabilities>\n'
            xml += f'    <successful_exploits>{summary.successful_exploits}</successful_exploits>\n'
            xml += f'    <active_sessions>{summary.active_sessions}</active_sessions>\n'
            xml += f'    <risk_score>{summary.risk_score}</risk_score>\n'
            xml += '  </executive_summary>\n'
        
        xml += '</pentest_report>\n'
        return xml
    
    def _export_csv_report(self, report: PentestReport, output_path: Path):
        """
        導出 CSV 格式報告（漏洞列表）
        """
        import csv
        
        with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['目標', '漏洞名稱', '嚴重程度', 'CVE ID', '描述', '端口', '服務']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            
            for vuln_result in report.vulnerability_results:
                for vuln in vuln_result.results:
                    writer.writerow({
                        '目標': vuln_result.target,
                        '漏洞名稱': vuln.name,
                        '嚴重程度': vuln.severity.value,
                        'CVE ID': vuln.cve_id or '',
                        '描述': vuln.description,
                        '端口': vuln.port or '',
                        '服務': vuln.service or ''
                    })
    
    def _export_markdown_report(self, report: PentestReport, output_path: Path):
        """
        導出 Markdown 格式報告
        """
        md_content = self._generate_markdown_content(report)
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(md_content)
    
    def _generate_markdown_content(self, report: PentestReport) -> str:
        """
        生成 Markdown 內容
        """
        md = f"# {report.title}\n\n"
        
        # 基本信息
        md += "## 報告信息\n\n"
        md += f"- **報告ID**: {report.report_id}\n"
        md += f"- **目標**: {report.target}\n"
        md += f"- **開始時間**: {datetime.fromtimestamp(report.start_time).strftime('%Y-%m-%d %H:%M:%S')}\n"
        if report.end_time:
            md += f"- **結束時間**: {datetime.fromtimestamp(report.end_time).strftime('%Y-%m-%d %H:%M:%S')}\n"
        if report.duration:
            md += f"- **持續時間**: {report.duration:.2f} 秒\n"
        md += f"- **測試人員**: {report.tester}\n"
        md += f"- **版本**: {report.version}\n\n"
        
        # 執行摘要
        if report.executive_summary:
            summary = report.executive_summary
            md += "## 執行摘要\n\n"
            md += f"- **總主機數**: {summary.total_hosts}\n"
            md += f"- **存在漏洞主機**: {summary.vulnerable_hosts}\n"
            md += f"- **總漏洞數**: {summary.total_vulnerabilities}\n"
            md += f"- **嚴重漏洞**: {summary.critical_vulnerabilities}\n"
            md += f"- **高危漏洞**: {summary.high_vulnerabilities}\n"
            md += f"- **中危漏洞**: {summary.medium_vulnerabilities}\n"
            md += f"- **低危漏洞**: {summary.low_vulnerabilities}\n"
            md += f"- **成功利用**: {summary.successful_exploits}\n"
            md += f"- **活躍會話**: {summary.active_sessions}\n"
            md += f"- **風險分數**: {summary.risk_score:.1f}/10\n\n"
            
            if summary.key_findings:
                md += "### 關鍵發現\n\n"
                for finding in summary.key_findings:
                    md += f"- {finding}\n"
                md += "\n"
            
            if summary.recommendations:
                md += "### 修復建議\n\n"
                for recommendation in summary.recommendations:
                    md += f"- {recommendation}\n"
                md += "\n"
        
        # 詳細結果
        for section in report.sections:
            md += f"## {section.title}\n\n"
            
            if section.section_type == "vulnerability_scan":
                for vuln_result in section.content:
                    md += f"### 目標: {vuln_result.target}\n\n"
                    if vuln_result.results:
                        md += "| 漏洞名稱 | 嚴重程度 | CVE ID | 描述 |\n"
                        md += "|----------|----------|--------|------|\n"
                        for vuln in vuln_result.results:
                            cve = vuln.cve_id or "N/A"
                            desc = vuln.description[:50] + "..." if len(vuln.description) > 50 else vuln.description
                            md += f"| {vuln.name} | {vuln.severity.value} | {cve} | {desc} |\n"
                        md += "\n"
        
        return md
    
    def _serialize_scan_result(self, scan_result: ScanResult) -> Dict[str, Any]:
        """
        序列化掃描結果
        """
        return {
            'target': scan_result.target,
            'scan_type': scan_result.scan_type,
            'start_time': scan_result.start_time,
            'end_time': scan_result.end_time,
            'duration': scan_result.duration,
            'hosts': [{
                'ip_address': host.ip_address,
                'hostname': host.hostname,
                'status': host.status,
                'open_ports': [{
                    'port': port.port,
                    'protocol': port.protocol,
                    'state': port.state,
                    'service': port.service,
                    'version': port.version
                } for port in host.open_ports]
            } for host in scan_result.hosts]
        }
    
    def _serialize_vulnerability_result(self, vuln_result: VulnerabilityResult) -> Dict[str, Any]:
        """
        序列化漏洞結果
        """
        return {
            'target': vuln_result.target,
            'scan_time': vuln_result.scan_time,
            'vulnerabilities': [{
                'name': vuln.name,
                'severity': vuln.severity.value,
                'cve_id': vuln.cve_id,
                'description': vuln.description,
                'port': vuln.port,
                'service': vuln.service,
                'status': vuln.status.value,
                'references': vuln.references
            } for vuln in vuln_result.results]
        }
    
    def _serialize_exploit_report(self, exploit_report: ExploitReport) -> Dict[str, Any]:
        """
        序列化漏洞利用報告
        """
        return {
            'target': exploit_report.target,
            'start_time': exploit_report.start_time,
            'end_time': exploit_report.end_time,
            'attempts': [{
                'module_name': attempt.module_name,
                'payload_name': attempt.payload_name,
                'success': attempt.success,
                'error_message': attempt.error_message,
                'session_id': attempt.session.session_id if attempt.session else None
            } for attempt in exploit_report.attempts]
        }
    
    def _serialize_post_exploit_task(self, task: PostExploitTask) -> Dict[str, Any]:
        """
        序列化後滲透任務
        """
        return {
            'task_id': task.task_id,
            'session_id': task.session_id,
            'task_type': task.task_type.value,
            'status': task.status.value,
            'start_time': task.start_time,
            'end_time': task.end_time,
            'duration': task.duration,
            'progress': task.progress,
            'results': task.results,
            'metadata': task.metadata,
            'errors': task.errors
        }
    
    def _load_html_template(self) -> str:
        """
        加載 HTML 模板
        
        Returns:
            HTML 模板字符串
        """
        # 內置 HTML 模板
        template = """
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            border-bottom: 3px solid #2196F3;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .header h1 {{
            color: #1976D2;
            margin: 0;
            font-size: 2.5em;
        }}
        .report-info {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .info-card {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #2196F3;
        }}
        .info-card h3 {{
            margin: 0 0 10px 0;
            color: #1976D2;
        }}
        .executive-summary {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 30px;
        }}
        .summary-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .stat-item {{
            text-align: center;
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 8px;
        }}
        .stat-number {{
            font-size: 2em;
            font-weight: bold;
            display: block;
        }}
        .severity-critical {{ background-color: #d32f2f; color: white; }}
        .severity-high {{ background-color: #f57c00; color: white; }}
        .severity-medium {{ background-color: #fbc02d; color: black; }}
        .severity-low {{ background-color: #388e3c; color: white; }}
        .severity-info {{ background-color: #1976d2; color: white; }}
        .severity-badge {{
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }}
        .status-badge {{
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }}
        .success {{ background-color: #4caf50; color: white; }}
        .failed {{ background-color: #f44336; color: white; }}
        .completed {{ background-color: #4caf50; color: white; }}
        .running {{ background-color: #ff9800; color: white; }}
        .pending {{ background-color: #9e9e9e; color: white; }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
        }}
        th, td {{
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background-color: #f5f5f5;
            font-weight: bold;
            color: #333;
        }}
        tr:hover {{
            background-color: #f9f9f9;
        }}
        .task-item {{
            border: 1px solid #ddd;
            margin: 15px 0;
            padding: 20px;
            border-radius: 8px;
            background: #fafafa;
        }}
        .task-output {{
            background: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            margin: 10px 0;
        }}
        .error-list {{
            color: #d32f2f;
            background: #ffebee;
            padding: 10px;
            border-radius: 5px;
        }}
        pre {{
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
        }}
        .chart-container {{
            margin: 20px 0;
            text-align: center;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
            color: #666;
        }}
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{title}</h1>
            <p>滲透測試自動化報告</p>
        </div>
        
        <div class="report-info">
            <div class="info-card">
                <h3>目標</h3>
                <p>{target}</p>
            </div>
            <div class="info-card">
                <h3>開始時間</h3>
                <p>{start_time}</p>
            </div>
            <div class="info-card">
                <h3>結束時間</h3>
                <p>{end_time}</p>
            </div>
            <div class="info-card">
                <h3>持續時間</h3>
                <p>{duration}</p>
            </div>
            <div class="info-card">
                <h3>測試人員</h3>
                <p>{tester}</p>
            </div>
            <div class="info-card">
                <h3>版本</h3>
                <p>{version}</p>
            </div>
        </div>
        
        <div class="executive-summary">
            <h2>執行摘要</h2>
            <div class="summary-stats">
                <div class="stat-item">
                    <span class="stat-number">{total_hosts}</span>
                    <span>總主機數</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">{vulnerable_hosts}</span>
                    <span>存在漏洞主機</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">{total_vulnerabilities}</span>
                    <span>總漏洞數</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">{successful_exploits}</span>
                    <span>成功利用</span>
                </div>
                <div class="stat-item">
                    <span class="stat-number">{risk_score:.1f}/10</span>
                    <span>風險分數</span>
                </div>
            </div>
            
            <div class="chart-container">
                <canvas id="vulnerabilityChart" width="400" height="200"></canvas>
            </div>
            
            <h3>關鍵發現</h3>
            <p>{key_findings}</p>
            
            <h3>修復建議</h3>
            <p>{recommendations}</p>
        </div>
        
        {sections_content}
        
        <div class="footer">
            <p>報告由 {company_name} 生成</p>
            <p>生成時間: {start_time}</p>
        </div>
    </div>
    
    <script>
        // 漏洞統計圖表
        const ctx = document.getElementById('vulnerabilityChart').getContext('2d');
        const vulnerabilityData = {vuln_chart_data};
        
        new Chart(ctx, {{
            type: 'doughnut',
            data: {{
                labels: ['嚴重', '高危', '中危', '低危'],
                datasets: [{{
                    data: [vulnerabilityData.critical, vulnerabilityData.high, vulnerabilityData.medium, vulnerabilityData.low],
                    backgroundColor: ['#d32f2f', '#f57c00', '#fbc02d', '#388e3c']
                }}]
            }},
            options: {{
                responsive: true,
                plugins: {{
                    title: {{
                        display: true,
                        text: '漏洞嚴重程度分布'
                    }}
                }}
            }}
        }});
    </script>
</body>
</html>
        """
        
        return template