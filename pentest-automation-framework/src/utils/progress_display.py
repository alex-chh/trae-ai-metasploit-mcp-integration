#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
進度顯示工具模組
Progress Display Utility Module

提供掃描過程中的進度條和狀態顯示功能
"""

import sys
import time
import threading
from typing import Optional, Callable, Any
from dataclasses import dataclass
from datetime import datetime, timedelta


@dataclass
class ProgressInfo:
    """
    進度信息
    """
    current: int = 0
    total: int = 100
    message: str = ""
    start_time: Optional[float] = None
    elapsed_time: Optional[float] = None
    estimated_time: Optional[float] = None
    percentage: float = 0.0
    
    def __post_init__(self):
        if self.start_time is None:
            self.start_time = time.time()
        self.update_progress()
    
    def update_progress(self):
        """更新進度信息"""
        if self.total > 0:
            self.percentage = (self.current / self.total) * 100
        else:
            self.percentage = 0.0
        
        if self.start_time:
            self.elapsed_time = time.time() - self.start_time
            
            if self.current > 0 and self.percentage > 0:
                # 估算剩餘時間
                rate = self.current / self.elapsed_time
                remaining_items = self.total - self.current
                self.estimated_time = remaining_items / rate if rate > 0 else None


class ProgressBar:
    """
    進度條顯示器
    """
    
    def __init__(self, total: int = 100, width: int = 50, 
                 show_percentage: bool = True, show_time: bool = True,
                 show_rate: bool = True, prefix: str = "Progress"):
        """
        初始化進度條
        
        Args:
            total: 總步驟數
            width: 進度條寬度
            show_percentage: 是否顯示百分比
            show_time: 是否顯示時間信息
            show_rate: 是否顯示速率
            prefix: 進度條前綴
        """
        self.total = total
        self.width = width
        self.show_percentage = show_percentage
        self.show_time = show_time
        self.show_rate = show_rate
        self.prefix = prefix
        
        self.progress_info = ProgressInfo(total=total)
        self._lock = threading.Lock()
        self._last_update = 0
        self._update_interval = 0.1  # 更新間隔（秒）
    
    def update(self, current: int, message: str = ""):
        """
        更新進度
        
        Args:
            current: 當前進度
            message: 狀態消息
        """
        with self._lock:
            self.progress_info.current = current
            self.progress_info.message = message
            self.progress_info.update_progress()
            
            # 限制更新頻率
            now = time.time()
            if now - self._last_update >= self._update_interval:
                self._display()
                self._last_update = now
    
    def increment(self, step: int = 1, message: str = ""):
        """
        增加進度
        
        Args:
            step: 增加的步數
            message: 狀態消息
        """
        self.update(self.progress_info.current + step, message)
    
    def finish(self, message: str = "完成"):
        """
        完成進度條
        
        Args:
            message: 完成消息
        """
        self.update(self.total, message)
        self._display()
        print()  # 換行
    
    def _display(self):
        """
        顯示進度條
        """
        info = self.progress_info
        
        # 計算進度條填充
        filled_width = int(self.width * info.percentage / 100)
        bar = '█' * filled_width + '░' * (self.width - filled_width)
        
        # 構建顯示字符串
        display_parts = [f"\r{self.prefix}: [{bar}]"]
        
        if self.show_percentage:
            display_parts.append(f" {info.percentage:.1f}%")
        
        display_parts.append(f" ({info.current}/{info.total})")
        
        if self.show_time and info.elapsed_time:
            elapsed_str = self._format_time(info.elapsed_time)
            display_parts.append(f" | 已用時: {elapsed_str}")
            
            if info.estimated_time:
                eta_str = self._format_time(info.estimated_time)
                display_parts.append(f" | 預計剩餘: {eta_str}")
        
        if self.show_rate and info.elapsed_time and info.elapsed_time > 0:
            rate = info.current / info.elapsed_time
            display_parts.append(f" | 速率: {rate:.1f}/s")
        
        if info.message:
            display_parts.append(f" | {info.message}")
        
        # 輸出進度條
        display_str = ''.join(display_parts)
        # 確保不超過終端寬度
        terminal_width = 120  # 假設終端寬度
        if len(display_str) > terminal_width:
            display_str = display_str[:terminal_width-3] + "..."
        
        sys.stdout.write(display_str)
        sys.stdout.flush()
    
    def _format_time(self, seconds: float) -> str:
        """
        格式化時間顯示
        
        Args:
            seconds: 秒數
            
        Returns:
            格式化的時間字符串
        """
        if seconds < 60:
            return f"{seconds:.0f}s"
        elif seconds < 3600:
            minutes = int(seconds // 60)
            secs = int(seconds % 60)
            return f"{minutes}m{secs}s"
        else:
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            return f"{hours}h{minutes}m"


class SpinnerDisplay:
    """
    旋轉指示器顯示器
    """
    
    def __init__(self, message: str = "處理中", spinner_chars: str = "⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"):
        """
        初始化旋轉指示器
        
        Args:
            message: 顯示消息
            spinner_chars: 旋轉字符序列
        """
        self.message = message
        self.spinner_chars = spinner_chars
        self.current_char = 0
        self.running = False
        self.thread = None
        self._lock = threading.Lock()
    
    def start(self):
        """
        開始顯示旋轉指示器
        """
        with self._lock:
            if not self.running:
                self.running = True
                self.thread = threading.Thread(target=self._spin)
                self.thread.daemon = True
                self.thread.start()
    
    def stop(self, final_message: str = "完成"):
        """
        停止旋轉指示器
        
        Args:
            final_message: 最終顯示消息
        """
        with self._lock:
            if self.running:
                self.running = False
                if self.thread:
                    self.thread.join(timeout=1.0)
                
                # 清除當前行並顯示最終消息
                sys.stdout.write(f"\r{final_message}\n")
                sys.stdout.flush()
    
    def update_message(self, message: str):
        """
        更新顯示消息
        
        Args:
            message: 新消息
        """
        with self._lock:
            self.message = message
    
    def _spin(self):
        """
        旋轉顯示循環
        """
        while self.running:
            with self._lock:
                char = self.spinner_chars[self.current_char]
                display_message = f"\r{char} {self.message}"
                sys.stdout.write(display_message)
                sys.stdout.flush()
                
                self.current_char = (self.current_char + 1) % len(self.spinner_chars)
            
            time.sleep(0.1)


class ProgressManager:
    """
    進度管理器
    
    統一管理多個進度顯示器
    """
    
    def __init__(self):
        self.progress_bars = {}
        self.spinners = {}
        self._lock = threading.Lock()
    
    def create_progress_bar(self, name: str, total: int, **kwargs) -> ProgressBar:
        """
        創建進度條
        
        Args:
            name: 進度條名稱
            total: 總步驟數
            **kwargs: 其他參數
            
        Returns:
            進度條實例
        """
        with self._lock:
            progress_bar = ProgressBar(total=total, **kwargs)
            self.progress_bars[name] = progress_bar
            return progress_bar
    
    def create_spinner(self, name: str, message: str = "處理中", **kwargs) -> SpinnerDisplay:
        """
        創建旋轉指示器
        
        Args:
            name: 指示器名稱
            message: 顯示消息
            **kwargs: 其他參數
            
        Returns:
            旋轉指示器實例
        """
        with self._lock:
            spinner = SpinnerDisplay(message=message, **kwargs)
            self.spinners[name] = spinner
            return spinner
    
    def get_progress_bar(self, name: str) -> Optional[ProgressBar]:
        """
        獲取進度條
        
        Args:
            name: 進度條名稱
            
        Returns:
            進度條實例或 None
        """
        return self.progress_bars.get(name)
    
    def get_spinner(self, name: str) -> Optional[SpinnerDisplay]:
        """
        獲取旋轉指示器
        
        Args:
            name: 指示器名稱
            
        Returns:
            旋轉指示器實例或 None
        """
        return self.spinners.get(name)
    
    def cleanup(self):
        """
        清理所有進度顯示器
        """
        with self._lock:
            # 停止所有旋轉指示器
            for spinner in self.spinners.values():
                if spinner.running:
                    spinner.stop()
            
            # 完成所有進度條
            for progress_bar in self.progress_bars.values():
                if progress_bar.progress_info.current < progress_bar.total:
                    progress_bar.finish("已中斷")
            
            self.progress_bars.clear()
            self.spinners.clear()


# 全局進度管理器實例
_global_progress_manager = ProgressManager()


def get_progress_manager() -> ProgressManager:
    """
    獲取全局進度管理器
    
    Returns:
        進度管理器實例
    """
    return _global_progress_manager